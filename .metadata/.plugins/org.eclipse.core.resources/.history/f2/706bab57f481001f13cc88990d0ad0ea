import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.testng.Assert;
import org.testng.annotations.*;
import io.github.bonigarcia.wdm.WebDriverManager;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

import java.time.Duration;
import java.util.List;

public class Validate_Sort_FunctionalityTest {
    WebDriver driver;

    @BeforeClass
    public void setUp() {
        WebDriverManager.chromedriver().setup();
        ChromeOptions options = new ChromeOptions();
        options.addArguments("--incognito");
        options.addArguments("--start-maximized");
        driver = new ChromeDriver(options);
    }

    @AfterClass
    public void tearDown() {
        if (driver != null) {
            driver.quit();
        }
    }

    @Test(dataProvider = "productData")
    public void validateSortPriceLowToHigh(String searchItem, String sortOrder, int pageLimit) {
        driver.get("https://www.flipkart.com");

        // Close the login popup
        driver.findElement(By.cssSelector("button._2KpZ6l._2doB4z")).click();

        // Search for the item
        WebElement searchBox = driver.findElement(By.name("q"));
        searchBox.sendKeys(searchItem);
        driver.findElement(By.cssSelector("button.L0Z3Pu")).click();

        // Wait for search results to load
        WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
        wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//div[text()='Price -- Low to High']"))).click();

        for (int i = 1; i <= pageLimit; i++) {
            // Wait for prices to load
            List<WebElement> priceElements = wait.until(ExpectedConditions.visibilityOfAllElementsLocatedBy(By.cssSelector("div._30jeq3._1_WHN1")));
            double prevPrice = 0.0;

            for (WebElement priceElement : priceElements) {
                double currentPrice = Double.parseDouble(priceElement.getText().replace("₹", "").replace(",", "").trim());
                System.out.println("Current Price: ₹" + currentPrice); // Print the current price
                Assert.assertTrue(currentPrice >= prevPrice, "Prices are not sorted correctly");
                prevPrice = currentPrice;
            }

            // Click next page if it's not the last page
            if (i < pageLimit) {
                driver.findElement(By.xpath("//a[@class='_1LKTO3'][text()='Next']")).click();
                wait.until(ExpectedConditions.visibilityOfAllElementsLocatedBy(By.cssSelector("div._30jeq3._1_WHN1"))); // Wait for the next page to load
            }
        }
    }

    @DataProvider(name = "productData")
    public Object[][] getProductData() {
        return new Object[][] {{"shoes", "Price -- Low to High", 2}};
    }
}
