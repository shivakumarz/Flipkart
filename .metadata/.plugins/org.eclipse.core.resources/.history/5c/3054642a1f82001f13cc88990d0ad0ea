import base.GlobalActions;
import page.CommonFunctions;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.testng.Assert;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;
import utils.Locators;

import java.util.List;

public class ValidateAddCart {

    private double totalSum = 0.0; 

    WebDriver driver;
    GlobalActions globalActions = new GlobalActions();
    CommonFunctions commonFunctions = new CommonFunctions();

    @BeforeClass
    public void setUp() {
        driver = globalActions.setUp();
    }

    @AfterClass
    public void tearDown() {
        globalActions.tearDown();
    }
    
    @DataProvider(name = "productData")
    public Object[][] productData() {
        return new Object[][] {
            {"shoes"}, 
        };
    }

    @Test(dataProvider = "productData")
    public void validateAddToCart(String searchItem) throws InterruptedException {
        globalActions.navigateToURL(driver);

        commonFunctions.searchProduct(driver, searchItem);
        commonFunctions.sortByLowToHigh(driver);

        double expectedTotal = 0.0; // To store expected total price
        int[] productIndices = {2, 3};

        for (int index : productIndices) {
            String productPriceText = driver.findElement(By.xpath(Locators.getProductPrice(index))).getText();
            double productPrice = Double.parseDouble(productPriceText.replace("₹", "").replace(",", "").trim());
            expectedTotal += productPrice; // Add product price to total
            driver.findElement(By.xpath(Locators.getProductPrice(index))).click();
            // Click the Add to Cart button for the product
            driver.findElement(By.xpath(Locators.ADD_TO_CART_BUTTON)).click();
            if (index == 2) {
                String originalTab = driver.getWindowHandle(); // Store the original tab handle
                driver.switchTo().window(originalTab);
            }
        }

        // Retrieve cart products
        List<WebElement> cartProducts = driver.findElements(By.cssSelector(Locators.CART_PRODUCTS));
        Assert.assertEquals(cartProducts.size(), 2, "Number of products in the cart is incorrect!");

        // Validate prices of products in cart
        for (int i = 0; i < cartProducts.size(); i++) {
            String cartProductPrice = cartProducts.get(i).findElement(By.cssSelector(Locators.PRODUCT_PRICE)).getText();
            double cartProductPriceValue = Double.parseDouble(cartProductPrice.replace("₹", "").replace(",", "").trim());
            Assert.assertEquals(cartProductPriceValue, expectedTotal, "Product price mismatch for product " + (i + 1));
        }
    }
}
