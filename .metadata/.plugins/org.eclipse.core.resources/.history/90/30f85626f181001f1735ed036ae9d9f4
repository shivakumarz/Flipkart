
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.testng.Assert;
import org.testng.annotations.*;
import java.util.List;
import io.github.bonigarcia.wdm.WebDriverManager;

public class Validate_Sort_Functionality {
    WebDriver driver;

    @BeforeClass
    public void setUp() {
        WebDriverManager.chromedriver().setup();
        ChromeOptions options = new ChromeOptions();
        options.addArguments("--incognito");
        options.addArguments("--start-maximized");
        driver = new ChromeDriver(options);
    }

    @AfterClass
    public void tearDown() {
        if (driver != null) {
            driver.quit();
        }
    }

    @Test(dataProvider = "productData")
    public void validateSortPriceLowToHigh(String searchItem, String sortOrder, int pageLimit) throws InterruptedException {
        driver.get("https://www.flipkart.com");
        driver.findElement(By.cssSelector("button._2KpZ6l._2doB4z")).click();
        WebElement searchBox = driver.findElement(By.name("q"));
        searchBox.sendKeys(searchItem);
        driver.findElement(By.cssSelector("button.L0Z3Pu")).click();
        Thread.sleep(2000);
        driver.findElement(By.xpath("//div[text()='Price -- Low to High']")).click();
        for (int i = 1; i <= pageLimit; i++) {
            List<WebElement> priceElements = driver.findElements(By.cssSelector("div._30jeq3._1_WHN1"));
            double prevPrice = 0.0;
            for (WebElement priceElement : priceElements) {
                double currentPrice = Double.parseDouble(priceElement.getText().replace("â‚¹", "").replace(",", "").trim());
                Assert.assertTrue(currentPrice >= prevPrice, "Prices are not sorted correctly");
                prevPrice = currentPrice;
            }
            if (i < pageLimit) {
                driver.findElement(By.xpath("//a[@class='_1LKTO3'][text()='Next']")).click();
                Thread.sleep(2000);
            }
        }
    }

    @DataProvider(name = "productData")
    public Object[][] getProductData() {
        return new Object[][] {{"shoes", "Price -- Low to High", 2}};
    }
}
